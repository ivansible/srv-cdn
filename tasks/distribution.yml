---
- name: determine distribution parameters
  vars:
    origin: "{{ item.origin |default('', true) }}"
    server: "{{ item.server }}"
    ref: "{{ item.reference
           | default(srv_cdn_cloudfront_default_reference)
           | regex_replace('SERVER', server) }}"
    comment: "{{ '%s - %s%s%s' % (ref, server, (' - ' if origin else ''), origin) }}"

    org: "Origins.Items[0]"
    hdr: "{{ org }}.CustomHeaders.Items"
    cfg: "{{ org }}.CustomOriginConfig"

  set_fact:
    cfront_dist_enabled: "{{ not(item.delete |default(false) |bool) }}"
    cfront_dist_origin: "{{ origin }}"
    cfront_dist_server: "{{ server }}"
    cfront_dist_lecert: "{{ item.lecert |default('', true) }}"
    cfront_dist_reference: "{{ ref }}"
    cfront_dist_comment: "{{ comment }}"

    cfront_dist_curr:
      "{{ cloudfront_facts.cloudfront.summary.distributions
        | json_query('[?Comment==`%s`]|[?Status==`Deployed`]|[0]' % comment) }}"

    cfront_dist_important_fields:
      id: "{{ org }}.Id"
      domain: "{{ org }}.DomainName"
      path: "{{ org }}.OriginPath"
      hdr_front: "{{ hdr }}[?HeaderName=='X-CDN-Front']|[0].HeaderValue"
      hdr_host: "{{ hdr }}[?HeaderName=='X-CDN-Host']|[0].HeaderValue"
      hdr_back: "{{ hdr }}[?HeaderName=='X-CDN-Back']|[0].HeaderValue"
      caching: 'DefaultCacheBehavior'
      logging: 'Logging'
      comment: 'Comment'
      http: 'HttpVersion'
      ipv6: 'IsIPV6Enabled'
      price: 'PriceClass'
      keepalive: "{{ cfg }}.OriginKeepaliveTimeout"
      timeout: "{{ cfg }}.OriginReadTimeout"
      tls_policy: "{{ cfg }}.OriginProtocolPolicy"
      tls_proto: "{{ cfg }}.OriginSslProtocols.Items"

- block:
    - name: create (or destroy) cloudfront distribution "{{ cfront_dist_reference }}" (can be rescued)
      cloudfront_distribution:
        aws_access_key: "{{ srv_cdn_cloudfront_access_key |default(omit, true) }}"
        aws_secret_key: "{{ srv_cdn_cloudfront_secret_key |default(omit, true) }}"

        caller_reference: "{{ cfront_dist_reference }}"
        state: "{{ cfront_dist_enabled |ternary('present','absent') }}"
        enabled: "{{ cfront_dist_enabled }}"

        ## This request must not change distribution, but omitted ipv6 state
        ## is treated as false by the module, so include it explicitly.
        ipv6_enabled: true
      register: cfront_dist_anew
      until: cfront_dist_anew is successful
      when: not cfront_dist_curr

  rescue:
    - name: first-time create cloudfront distribution "{{ cfront_dist_reference }}"
      cloudfront_distribution:
        aws_access_key: "{{ srv_cdn_cloudfront_access_key |default(omit, true) }}"
        aws_secret_key: "{{ srv_cdn_cloudfront_secret_key |default(omit, true) }}"

        caller_reference: "{{ cfront_dist_reference }}"
        ## FIXME we should run this step only when creating distribution!
        state: "{{ cfront_dist_enabled |ternary('present','absent') }}"
        enabled: "{{ cfront_dist_enabled }}"

        ## set default origin in case it was missing (due to idempotence)
        default_origin_domain_name: "{{ cfront_dist_server }}"

        ## This request must not change distribution, but omitted ipv6 state
        ## is treated as false by the module, so include it explicitly.
        ipv6_enabled: true
      register: cfront_dist_anew
      until: cfront_dist_anew is successful
      when: not cfront_dist_curr

- name: update cloudfront distribution "{{ cfront_dist_reference }}"
  cloudfront_distribution:
    aws_access_key: "{{ srv_cdn_cloudfront_access_key |default(omit, true) }}"
    aws_secret_key: "{{ srv_cdn_cloudfront_secret_key |default(omit, true) }}"

    caller_reference: "{{ cfront_dist_reference }}"
    state: present
    enabled: true
    comment: "{{ cfront_dist_comment }}"

    http_version: http2
    ipv6_enabled: true
    price_class: PriceClass_100

    origins:
      - id: "{{ cfront_dist_reference }}"
        domain_name: "{{ cfront_dist_server }}"
        custom_origin_config:
          origin_ssl_protocols:
            items: [TLSv1.2]
          origin_protocol_policy: https-only
          origin_read_timeout: 30
          origin_keepalive_timeout: 5
          http_port: 80
          https_port: 443
        custom_headers: "{{ headers_list }}"

    default_cache_behavior:
      target_origin_id: "{{ cfront_dist_reference }}"
      viewer_protocol_policy: redirect-to-https
      allowed_methods:
        items: [GET, HEAD, OPTIONS, POST, PUT, PATCH, DELETE]
        cached_methods: "{{ srv_cdn_cloudfront_cached_methods }}"
      forwarded_values:
        headers: "{{ cache_headers }}"
        cookies:
          forward: all
        query_string: true
      min_ttl: 0
      max_ttl: "{{ srv_cdn_cloudfront_max_ttl }}"
      default_ttl: "{{ srv_cdn_cloudfront_default_ttl }}"
      smooth_streaming: false
      compress: false

    logging:
      enabled: false
      include_cookies: false
      bucket: ""
      prefix: ""

  register: cfront_dist_result
  until: cfront_dist_result is successful
  when: cfront_dist_enabled

  ## Note:
  ## The cloudfront_distribution module obtains current origin headers
  ## in random order resulting in sporadic change detection.
  ## As a workaround, we pick critical fields in deterministic order
  ## and compare manually.
  changed_when:
    - cfront_dist_result is changed
    - crit_fields_before != crit_fields_after
    - not srv_cdn_cloudfront_silent_changes |bool

  vars:
    crit_fields_before: "{{ cfront_dist_result.diff.before |json_query(query_changed) |to_json }}"
    crit_fields_after: "{{ cfront_dist_result.diff.after  |json_query(query_changed) |to_json }}"

    query_changed: "{ {{ cfront_dist_important_fields |dictsort |map('join',': ') |join(',') }} }"

    cache_enabled: "{{ item.cache |default(srv_cdn_cloudfront_default_cache) |bool }}"
    cache_headers: "{{ [] if cache_enabled else ['*'] }}"

    headers_dict:
      ## Send cloudfront host name to server in the X-Front header, since
      ## cloudfront currently sends server host name in the Host header.
      ## Also send origin override in the X-Back header (if defined)
      ## and server name in the X-Host header in case override is undefined.
      X-CDN-Front: "{{ cfront_dist_curr.DomainName |default(cfront_dist_anew.domain_name) }}"
      X-CDN-Host: "{{ cfront_dist_server }}"
      X-CDN-Back: "{{ cfront_dist_origin }}"
    ## Sort headers and skip empty ones in attempt to gain idempotence.
    headers_list: "{{ headers_dict
                    | dict2items(key_name='header_name', value_name='header_value')
                    | selectattr('header_value')
                    | sort(attribute='header_name')
                    | list }}"


- name: gather results for cloudfront distribution "{{ cfront_dist_reference }}"
  set_fact:
    cdn_cloudfront_sites: "{{ old_sites + [new_site] }}"
  vars:
    old_sites: "{{ cdn_cloudfront_sites }}"
    new_site:
      comment: "{{ cfront_dist_comment }}"
      id: "{{ cfront_dist_curr.Id |default(cfront_dist_anew.id) }}"
      lecert: "{{ cfront_dist_lecert }}"
      origin: "{{ cfront_dist_origin }}"
      server: "{{ cfront_dist_server }}"
      url: "{{ cfront_dist_curr.DomainName |default(cfront_dist_anew.domain_name) }}"
  when: cfront_dist_enabled
...
